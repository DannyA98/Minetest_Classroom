
import pyodbc
import pandas as pd
import logging
import log_config

logging.info("Table GH23_BENCAPS_CAPS_PAYD_DAILY_BKU  - Moving data from .CSV to DB.")

# Connection parameters
server = 'gwgccbsdbd01'
database = 'GCCBS_D'
driver = 'ODBC Driver 17 for SQL Server'
schema = 'dbo'
# Connect to SQL Server using a trusted connection
conn_str = f'DRIVER={{{driver}}};SERVER={server};DATABASE={database};Trusted_Connection=yes;'

try:
    conn = pyodbc.connect(conn_str)
    cursor = conn.cursor()

    # Path to your CSV file
    csv_file_path = '.\\bencap.csv'  # Replace with the actual path to your CSV file
    # Load CSV file into a pandas DataFrame
    df = pd.read_csv(csv_file_path, sep='delimiter', encoding='latin-1', engine='python')

    # Define the table name
    table_name = 'GH23_BENCAPS_CAPS_PAYD_DAILY_BKU '  # Replace with your actual table name
    # Insert DataFrame into SQL Server
    for index, row in df.iterrows():
        _row = row[0].split(",")
        _row[0] = _row[0].ljust(4)[:4]
        _row[1] = int(_row[1])
        _row[2] = int(_row[2])
        _row[3] = _row[3].ljust(6)[:6]
        _row[4] = int(_row[4])
        _row[5] = int(_row[5])
        _row[6] = int(_row[6])
        _row[7] = _row[7].ljust(1)[:1]
        _row[8] = _row[8].ljust(10)[:10]
        _row[9] = _row[9].ljust(10)[:10]
        _row[10] = _row[10].ljust(2)[:2]
        _row[11] = int(_row[11])
        _row[12] = int(_row[12])
        _row[13] = _row[13].ljust(2)[:2]
        _row[14] = int(_row[14])
        _row[15] = int(_row[15])
        _row[16] = int(_row[16])
        _row[17] = _row[17].ljust(6)[:6]
        _row[18] = int(_row[18])
        _row[19] = int(_row[19])
        _row[20] = int(_row[20])
        _row[21] = int(_row[21])
        _row[22] = _row[22].ljust(10)[:10]
        _row[23] = _row[23].ljust(20)[:20]
        _row[24] = _row[24].ljust(9)[:9]
        _row[25] = _row[25].ljust(1)[:1]
        _row[26] = _row[26].ljust(2)[:2]
        _row[27] = _row[27].ljust(2)[:2]
        _row[28] = _row[28].ljust(2)[:2]
        _row[29] = _row[29].ljust(9)[:9]
        _row[30] = _row[30].ljust(1)[:1]
        _row[31] = _row[31].ljust(6)[:6]
        _row[32] = int(_row[32])
        _row[33] = int(_row[33])
        _row[34] = int(_row[34])
        _row[35] = _row[35].ljust(1)[:1]
        _row[36] = _row[36].ljust(20)[:20]
        _row[37] = int(_row[37])
        _row[38] = _row[38].ljust(6)[:6]
        _row[39] = int(_row[39])
        _row[40] = _row[40].ljust(1)[:1]
        _row[41] = _row[41].ljust(1)[:1]
        _row[42] = float(_row[42])
        _row[43] = float(_row[43])
        _row[44] = float(_row[44])
        _row[45] = float(_row[45])
        _row[46] = _row[46].ljust(2)[:2]
        _row[47] = float(_row[47])
        _row[48] = float(_row[48])
        _row[49] = float(_row[49])
        _row[50] = float(_row[50])
        _row[51] = float(_row[51])
        _row[52] = float(_row[52])
        _row[53] = float(_row[53])
        _row[54] = _row[54].ljust(2)[:2]
        _row[55] = float(_row[55])
        _row[56] = float(_row[56])
        _row[57] = float(_row[57])
        _row[58] = float(_row[58])
        _row[59] = int(_row[59])
        _row[60] = _row[60].zfill(2)[:2]
        _row[61] = _row[61].ljust(2)[:2]
        _row[62] = int(_row[62])
        _row[63] = int(_row[63])
        _row[64] = int(_row[64])
        _row[65] = _row[65].ljust(1)[:1]
        _row[66] = int(_row[66])
        _row[67] = int(_row[67])
        _row[68] = int(_row[68])
        _row[69] = float(_row[69])
        _row[70] = _row[70].ljust(6)[:6]
        _row[71] = int(_row[71])
        _row[72] = float(_row[72])
        _row[73] = float(_row[73])
        print(_row[74])
        _row[74] = _row[74].ljust(1)[:1] # problem 
        _row[75] = int(_row[75])
        _row[76] = int(_row[76])
        _row[77] = int(_row[77])
        _row[78] = int(_row[78])
        _row[79] = _row[79].ljust(20)[:20]
        _row[80] = int(_row[80])
        _row[81] = _row[81].ljust(30)[:30]
        _row[82] = _row[82].ljust(1)[:1]
        _row[83] = float(_row[83])
        _row[84] = int(_row[84])
        _row[85] = int(_row[85])
        _row[86] = int(_row[86])
        _row[87] = int(_row[87])
        _row[88] = float(_row[88])
        _row[89] = float(_row[89])
        _row[90] = float(_row[90])
        _row[91] = float(_row[91])
        _row[92] = _row[92].ljust(1)[:1]
        _row[93] = int(_row[93])
        _row[94] = int(_row[94])
        _row[95] = float(_row[95])
        _row[96] = _row[96].ljust(12)[:12]
        _row[97] = int(_row[97])
        _row[98] = int(_row[98])
        _row[99] = int(_row[99])
        _row[100] = int(_row[100])
        _row[101] = int(_row[101])
        _row[102] = int(_row[102])
        _row[103] = _row[103].ljust(5)[:5]
        _row[104] = _row[104].ljust(30)[:30]
        _row[105] = _row[105].ljust(15)[:15]
        _row[106] = _row[106].ljust(30)[:30]
        _row[107] = int(_row[107])
        _row[108] = _row[108].ljust(11)[:11]
        _row[109] = _row[109].ljust(3)[:3]

        cursor.execute(f"""
            INSERT INTO {schema}.{table_name} (GH23BENCAPCAPSPAYDDAILYBKUId,RMT_REC_TYPE,RMT_DATE,RMT_OFF_NBR,RMT_PLCY,RMT_DIV,RMT_CLS,RMT_INCURR_DT,RMT_POOLING_IND
      ,RMT_EMP_ID,RMT_FNAME,RMT_REL,RMT_CLM_NBR,RMT_TRANS,RMT_PLCY_TYPE,RMT_INV_NBR,RMT_DOB,RMT_DT_REC,RMT_PAID_PLCY,RMT_PAID_DIV,RMT_PAID_CLS,RMT_EE_BANK_ID
      ,RMT_NBR,RMT_EE_FNAME,RMT_EE_LNAME, RMT_EE_ZIP,RMT_SEX_EE,RMT_EE_ST,RMT_PROV_ST,RMT_PROV_TYPE,RMT_PROV_ZIP,RMT_SEX,RMT_RPT_PLCY,RMT_RPT_DIV,RMT_RPT_CLS,RMT_DT_PEND_CONS
      ,RMT_COB,RMT_LNAME_2,RMT_CL_SERV_CD,RMT_SERVICE_CD,RMT_FST_DT,RMT_PAY_CD,RMT_NON_DUPE,RMT_CHARGE,RMT_NC_AMT,RMT_BASE_COV_AMT,RMT_BASE_DED_AMT,RMT_BASE_DED_DESC
      ,RMT_BASE_PCT,RMT_BASE_WD_PAY ,RMT_BASE_AMT ,RMT_MM_COV_AMT ,RMT_MM_DED_AMT ,RMT_MM_WD_PAY,RMT_MM_AMT,RMT_MM_DED_DESC,RMT_MM_PCT,RMT_BASE_OI_AMT,RMT_MM_OI_AMT
      ,RMT_CR_RES_AMT,RMT_DFT_NBR,RMT_OVR_CD,RMT_REMARK_CD,RMT_BANK_CD,RMT_COB_CD,RMT_SIN_NBR,RMT_FIRST_SUBSEQ,RMT_PAY_LOC,RMT_SAV_TYPE,RMT_DEP_NBR,RMT_POOLING_AMT
      ,RMT_CAUSE,RMT_LST_DT,RMT_SUP_WD_PAY,RMT_SUP_AMT,RMT_PROD_CODE,RMT_DIS_CD,RMT_OCP_CD,RMT_PROV_SCRN_NBR,RMT_PROV_TEL_NBR,RMT_DIAG,RMT_PROV_TIN,RMT_PROV_NAME
      ,RMT_PROV_ID_TYPE,RMT_OI_CON_AMT,RMT_ADJ_NBR,RMT_SUB_ACCT_CD,RMT_TYPE,RMT_CLIENT_SIZE,RMT_BASE_SCHED_AMT,RMT_MM_SCHED_AMT,RMT_PROV_ASP,RMT_PROV_WARD,RMT_EFT_IND
      ,RMT_TIME,RMT_CTL_NBR_CONS_DFT,RMT_DRAFT_AMT,RMT_EE_BANK_ACCT,RMT_DLR_CLM_NBR,RMT_LT_BEG_DT,RMT_LT_TERM_DT,RMT_LT_MAX_EXP_DT,RMT_TEETH,RMT_PPC_CD,RMT_SURFACE_CD
      ,RMT_EE_ADDR,RMT_EE_CITY,RMT_PROV_ADDR,RMT_DINN,RMT_CIDE,RMT_CALI,ISRT_TSTP,ISRT_USR)
            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
      ,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
      ,?,?,?,?,?,?,?,?,?)
        """,index,_row[0],_row[1],_row[2],_row[3],_row[4],_row[5],_row[6],_row[7],_row[8],_row[9],_row[10],_row[11],_row[12],_row[13],_row[14],_row[15],_row[16]
        ,_row[17],_row[18],_row[19],_row[20],_row[21],_row[22],_row[23],_row[24],_row[25],_row[26],_row[27],_row[28],_row[29],_row[30],_row[31],_row[32],_row[33]
        ,_row[34],_row[35],_row[36],_row[37],_row[38],_row[39],_row[40],_row[41],_row[42],_row[43],_row[44],_row[45],_row[46],_row[47],_row[48],_row[49],_row[50]
        ,_row[51],_row[52],_row[53],_row[54],_row[55],_row[56],_row[57],_row[58],_row[59],_row[60],_row[61],_row[62],_row[63],_row[64],_row[65],_row[66]
        ,_row[67],_row[68],_row[69],_row[70],_row[71],_row[72],_row[73],_row[74],_row[75],_row[76],_row[77],_row[78],_row[79],_row[80],_row[81]
        ,_row[82],_row[83],_row[84],_row[85],_row[86],_row[87],_row[88],_row[89],_row[90],_row[91],_row[92],_row[93],_row[94],_row[95],_row[96]
        ,_row[97],_row[98],_row[99],_row[100],_row[101],_row[102],_row[103],_row[104],_row[105],_row[106],_row[107],_row[108],_row[109],'2024-06-11 10:21:05.055086','DANIEL')
        if index == 200:
            break
    # Commit the transaction
    conn.commit()
    # Close the connection
    cursor.close()
    conn.close()
except Exception as e:
    logging.getLogger('error_logger').error(f"Error occurred in task: {e}")
finally:
    logging.info("Table GH23_BENCAPS_CAPS_PAYD_DAILY_BKU  - Data has been moved from CSV to DB")
